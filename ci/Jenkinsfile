pipeline {
  agent any

  environment {
    VERSION = "1.0.2"
    IMAGE_URL = "harbor.chatree.dev/chatreejs/weather-station"
    DESTINATION_SERVER = "10.13.51.1"
  }

  stages {
    stage('Prepare Env') {
      steps {
        script {
          def now = new Date()
          env.BUILD_DATE = now.format("yyyyMMdd")
          env.BUILD_VERSION = "${VERSION}-${BUILD_DATE}-${BUILD_NUMBER}"
        }
      }
    }

    stage('Static Code Scan') {
      agent {
        docker {
          image 'sonarsource/sonar-scanner-cli:latest'
          args '-v $PWD:/workspace -w /workspace -u root --privileged'
        }
      }
      steps {
        withSonarQubeEnv('SonarQube Server') {
          sh 'sonar-scanner'
        }
      }
    }

    stage('Build Docker Image (edge)') {
      steps {
        sh '''
          cd app/edge
          docker build --builder multi-arch-builder --platform linux/arm/v7 -f Dockerfile . -t ${IMAGE_URL}-edge:${BUILD_VERSION} --load
        '''
      }
    }

    stage('Build Docker Image (gateway)') {
      steps {
        sh '''
          cd app/gateway
          docker build --builder multi-arch-builder --platform linux/arm/v7 -f Dockerfile . -t ${IMAGE_URL}-gateway:${BUILD_VERSION} --load
        '''
      }
    }

    stage('Push to registry') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'chatree-docker-registry-credential', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
          sh 'docker login harbor.chatree.dev -u $USERNAME -p $PASSWORD'
          sh 'docker push ${IMAGE_URL}-edge:${BUILD_VERSION}'
          sh 'docker push ${IMAGE_URL}-gateway:${BUILD_VERSION}'
        }
      }
    }

    stage('Clear Image') {
      steps {
        sh 'docker rmi ${IMAGE_URL}-edge:${BUILD_VERSION}'
        sh 'docker rmi ${IMAGE_URL}-gateway:${BUILD_VERSION}'
      }
    }

    stage('Deploy') {
      steps {
        script {
          withCredentials([sshUserPrivateKey(credentialsId: 'ctlssh-credential', keyFileVariable: 'IDENTITY', usernameVariable: 'USERNAME')]) {
            sh "ssh -o StrictHostKeyChecking=no -i ${IDENTITY} ${USERNAME}@${DESTINATION_SERVER} \'docker pull ${IMAGE_URL}-gateway:${BUILD_VERSION} \
            && cd /opt/app/weather-station \
            && docker compose down \
            && sed -i \"s/^\\(TAG_VERSION=\\).*/TAG_VERSION=${BUILD_VERSION}/g\" .env \
            && docker compose up -d\'"
          }
        }
      }
    }

  }

  post {
    success {
      discordSend description: "Duration: ${currentBuild.durationString}", link: env.BUILD_URL, result: currentBuild.currentResult, title: "${JOB_NAME} - # ${BUILD_VERSION}", footer: "${currentBuild.getBuildCauses()[0].shortDescription}",webhookURL: "https://discord.com/api/webhooks/${DISCORD_WEBHOOK_ID}/${DISCORD_WEBHOOK_TOKEN}"
    }
    failure {
      discordSend description: "Duration: ${currentBuild.durationString}", link: env.BUILD_URL, result: currentBuild.currentResult, title: "${JOB_NAME} - # ${BUILD_VERSION}", footer: "${currentBuild.getBuildCauses()[0].shortDescription}",webhookURL: "https://discord.com/api/webhooks/${DISCORD_WEBHOOK_ID}/${DISCORD_WEBHOOK_TOKEN}"
    }
  }

}
